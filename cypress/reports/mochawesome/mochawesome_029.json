{
  "stats": {
    "suites": 2,
    "tests": 3,
    "passes": 3,
    "pending": 0,
    "failures": 0,
    "start": "2025-07-22T19:40:02.833Z",
    "end": "2025-07-22T19:40:06.276Z",
    "duration": 3443,
    "testsRegistered": 3,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "a72babda-55ee-41ac-9101-0f86958f8ec2",
      "title": "",
      "fullFile": "cypress\\e2e\\apiPostOrders.cy.js",
      "file": "cypress\\e2e\\apiPostOrders.cy.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "1f0f8c91-ede6-4bb3-8125-2188fc5942f7",
          "title": "POST /Orders avec commande",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Devrait ajouter un produit au panier",
              "fullTitle": "POST /Orders avec commande Devrait ajouter un produit au panier",
              "timedOut": null,
              "duration": 1343,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Étape 1 : Ajouter un produit au panier\ncy.request({\n  method: \"PUT\",\n  url: apiUrl + \"/orders/add\",\n  headers: {\n    Authorization: \"Bearer \" + token\n  },\n  body: {\n    product: 6,\n    // ou un produit connu en stock\n    quantity: 1\n  }\n}).then(addResponse => {\n  expect(addResponse.status).to.eq(200); // Vérifie que l'ajout au panier est réussi\n});",
              "err": {},
              "uuid": "edf6f231-7f81-4087-a8ed-052b4e46717f",
              "parentUUID": "1f0f8c91-ede6-4bb3-8125-2188fc5942f7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Devrait créer une commande avec succès",
              "fullTitle": "POST /Orders avec commande Devrait créer une commande avec succès",
              "timedOut": null,
              "duration": 271,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.request({\n  method: \"POST\",\n  url: apiUrl + \"/orders\",\n  headers: {\n    Authorization: \"Bearer \" + token,\n    Accept: \"application/json\"\n  },\n  body: {\n    firstname: \"Test\",\n    lastname: \"Test\",\n    address: \"155 rue test\",\n    zipCode: \"75001\",\n    city: \"Paris\"\n  }\n}).then(response => {\n  expect(response.status).to.eq(200); // Vérifie que la commande est créée avec succès\n  expect(response.body).to.include({\n    firstname: \"Test\",\n    lastname: \"Test\",\n    zipCode: \"75001\",\n    city: \"Paris\",\n    validated: true\n  }); // Vérifie que les informations de la commande sont correctes\n  expect(response.body).to.have.property(\"orderLines\").and.to.be.an(\"array\"); // Vérifie que la commande contient des lignes de commande\n});",
              "err": {},
              "uuid": "52a5ccb9-d333-4e3d-8183-dbb1fd31bbdf",
              "parentUUID": "1f0f8c91-ede6-4bb3-8125-2188fc5942f7",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "edf6f231-7f81-4087-a8ed-052b4e46717f",
            "52a5ccb9-d333-4e3d-8183-dbb1fd31bbdf"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1614,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "e04e0f48-9dcd-4324-8920-a46ec3f91481",
          "title": "POST /orders sans commande",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Devrait retourner 404 et un message explicite s'il n'y a pas de commande en cours",
              "fullTitle": "POST /orders sans commande Devrait retourner 404 et un message explicite s'il n'y a pas de commande en cours",
              "timedOut": null,
              "duration": 1765,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const fakeEmail = _faker.faker.internet.email();\nconst fakeFirstName = _faker.faker.person.firstName();\nconst fakeLastName = _faker.faker.person.lastName();\nconst fakePassword = _faker.faker.internet.password();\n// Étape 1 : créer un utilisateur pour obtenir un token\ncy.request({\n  method: \"POST\",\n  url: apiUrl + \"/register\",\n  body: {\n    email: fakeEmail,\n    firstname: fakeFirstName,\n    lastname: fakeLastName,\n    plainPassword: {\n      first: fakePassword,\n      second: fakePassword\n    }\n  }\n}).then(response => {\n  expect(response.status).to.eq(200); // Vérifie que l'inscription est réussie\n  // Étape 2 : login pour obtenir un token valide\n  cy.request(\"POST\", apiUrl + \"/login\", {\n    username: fakeEmail,\n    password: fakePassword\n  }).then(response => {\n    expect(response.status).to.eq(200); // Vérifie que la connexion est réussie\n    const token = response.body.token;\n    // Étape 3 : test POST /orders\n    cy.request({\n      method: \"POST\",\n      url: apiUrl + \"/orders\",\n      headers: {\n        Authorization: `Bearer ${token}`,\n        Accept: \"application/json\"\n      },\n      failOnStatusCode: false // Permet de capturer la réponse même si le code est une erreur\n    }).then(response => {\n      expect(response.status).to.eq(404); // Vérifie que le serveur retourne une erreur 404\n      if (typeof response.body === \"string\") {\n        expect(response.body).to.include(\"Pas de commande en cours\"); // Vérifie le message d'erreur retourné\n      }\n    });\n  });\n});",
              "err": {},
              "uuid": "e24cdae6-1dc0-44b8-a835-bf1961dd9a30",
              "parentUUID": "e04e0f48-9dcd-4324-8920-a46ec3f91481",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "e24cdae6-1dc0-44b8-a835-bf1961dd9a30"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1765,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "7.2.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "reportDir": "cypress/reports/mochawesome",
        "overwrite": false,
        "html": true,
        "json": true
      },
      "version": "6.2.0"
    }
  }
}