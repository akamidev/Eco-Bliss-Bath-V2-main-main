{
  "stats": {
    "suites": 1,
    "tests": 1,
    "passes": 1,
    "pending": 0,
    "failures": 0,
    "start": "2025-07-22T19:25:57.645Z",
    "end": "2025-07-22T19:26:02.068Z",
    "duration": 4423,
    "testsRegistered": 1,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "56f25718-de43-4e88-a4a9-6054b6a64eb0",
      "title": "",
      "fullFile": "cypress\\e2e\\5-testXss.cy.js",
      "file": "cypress\\e2e\\5-testXss.cy.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "5c8c7eaf-c0d0-4e51-a83f-7520f6b1ee00",
          "title": "Vérifier faille XSS",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "ne doit pas exécuter un script injecté dans un commentaire",
              "fullTitle": "Vérifier faille XSS ne doit pas exécuter un script injecté dans un commentaire",
              "timedOut": null,
              "duration": 4363,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Préparation des données à injecter dans le formulaire d'avis.\nconst title = \"Test XSS123\";\nconst xssPayload = '<script>alert(\"XSS\")</script>'; // Payload XSS classique.\n// Sélection d'une note via une image (exemple : 4ème étoile).\ncy.get('[data-cy=\"review-input-rating-images\"] img').eq(3).click();\n// Saisie du titre et du commentaire contenant le script malveillant.\ncy.get('[data-cy=\"review-input-title\"]').clear().type(title);\ncy.get('[data-cy=\"review-input-comment\"]').clear().type(xssPayload);\ncy.get('[data-cy=\"review-submit\"]').click(); // Soumission du formulaire.\n// Vérifie qu'aucune alerte JavaScript n'a été déclenchée suite à l'injection.\ncy.on(\"window:alert\", txt => {\n  // Si cette fonction est appelée, cela signifie qu'un script malveillant a été exécuté.\n  throw new Error(\"Faille XSS détectée via alert: \" + txt); // Le test échoue si une alerte est détectée.\n});",
              "err": {},
              "uuid": "da29a479-5c9d-45a4-a899-435c74e6e561",
              "parentUUID": "5c8c7eaf-c0d0-4e51-a83f-7520f6b1ee00",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "da29a479-5c9d-45a4-a899-435c74e6e561"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 4363,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "7.2.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "reportDir": "cypress/reports/mochawesome",
        "overwrite": false,
        "html": true,
        "json": true
      },
      "version": "6.2.0"
    }
  }
}