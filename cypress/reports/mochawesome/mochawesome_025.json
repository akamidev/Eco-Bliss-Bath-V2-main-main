{
  "stats": {
    "suites": 4,
    "tests": 5,
    "passes": 5,
    "pending": 0,
    "failures": 0,
    "start": "2025-07-22T19:39:39.014Z",
    "end": "2025-07-22T19:39:40.449Z",
    "duration": 1435,
    "testsRegistered": 5,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "ebf54f9a-ed6b-4676-a669-fc1ebe56242d",
      "title": "",
      "fullFile": "cypress\\e2e\\apiGetProducts.cy.js",
      "file": "cypress\\e2e\\apiGetProducts.cy.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "6a64961e-4449-48e7-b65f-3b20dc3e1bd1",
          "title": "GET / Products",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Devrait retourner un 200 avec la liste des produits",
              "fullTitle": "GET / Products Devrait retourner un 200 avec la liste des produits",
              "timedOut": null,
              "duration": 234,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.request({\n  method: \"GET\",\n  url: apiUrl + \"/products\",\n  headers: {\n    Accept: \"application/json\"\n  }\n}).then(response => {\n  expect(response.status).to.eq(200); // Vérifie le code de statut\n  expect(response.body).to.be.an(\"array\"); // Vérifie que la réponse est un tableau\n  expect(response.body.length).to.be.greaterThan(0); // Vérifie qu'il y a au moins un produit\n  // Vérifie les propriétés de chaque produit\n  response.body.forEach(product => {\n    expect(product).to.include.keys(\"id\", \"name\", \"price\", \"description\");\n    expect(product.id).to.be.a(\"number\");\n    expect(product.name).to.be.a(\"string\");\n    expect(product.price).to.be.a(\"number\");\n    expect(product.description).to.be.a(\"string\");\n  });\n});",
              "err": {},
              "uuid": "f139f528-a391-4972-818b-1104cfd8c0ca",
              "parentUUID": "6a64961e-4449-48e7-b65f-3b20dc3e1bd1",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "f139f528-a391-4972-818b-1104cfd8c0ca"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 234,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "4549d398-0b0e-4275-b5d6-87c929f47a2e",
          "title": "GET / Products random",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Devrait retourner un 200 avec une liste de 3 produits aleatoires",
              "fullTitle": "GET / Products random Devrait retourner un 200 avec une liste de 3 produits aleatoires",
              "timedOut": null,
              "duration": 219,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.request({\n  method: \"GET\",\n  url: apiUrl + \"/products/random\",\n  headers: {\n    Accept: \"application/json\"\n  }\n}).then(response => {\n  expect(response.status).to.eq(200); // Vérifie le code de statut\n  expect(response.body).to.be.an(\"array\"); // Vérifie que la réponse est un tableau\n  expect(response.body.length).to.be.equal(3); // Vérifie qu'il y a exactement 3 produits\n  // Vérifie les propriétés de chaque produit\n  response.body.forEach(product => {\n    expect(product).to.include.keys(\"id\", \"name\", \"price\", \"description\");\n    expect(product.id).to.be.a(\"number\");\n    expect(product.name).to.be.a(\"string\");\n    expect(product.price).to.be.a(\"number\");\n    expect(product.description).to.be.a(\"string\");\n  });\n});",
              "err": {},
              "uuid": "d2443ff2-8751-41e7-8bed-529c37729cac",
              "parentUUID": "4549d398-0b0e-4275-b5d6-87c929f47a2e",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "d2443ff2-8751-41e7-8bed-529c37729cac"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 219,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "1e104b9a-ef26-45d5-8d63-bab4f7342103",
          "title": "GET / Products random qui ne sont pas les mêmes",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Devrait retourner des produits aléatoires à chaque appel",
              "fullTitle": "GET / Products random qui ne sont pas les mêmes Devrait retourner des produits aléatoires à chaque appel",
              "timedOut": null,
              "duration": 307,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.request(apiUrl + \"/products/random\").then(response => {\n  const secondCall = response.body; // Stocke le résultat du second appel\n  // Compare les deux résultats pour vérifier qu'ils sont différents\n  expect(JSON.stringify(firstCall)).to.not.equal(JSON.stringify(secondCall));\n});",
              "err": {},
              "uuid": "d98c836d-77cb-451d-b463-c54ae102540e",
              "parentUUID": "1e104b9a-ef26-45d5-8d63-bab4f7342103",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "d98c836d-77cb-451d-b463-c54ae102540e"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 307,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "57f64bd5-43ba-4c51-ac75-1752fad55b40",
          "title": "GET / Récupere les détails d'un produit ",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Devrait retourner un 200 avec un detail du produit",
              "fullTitle": "GET / Récupere les détails d'un produit  Devrait retourner un 200 avec un detail du produit",
              "timedOut": null,
              "duration": 288,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.request({\n  method: \"GET\",\n  url: apiUrl + \"/products/\" + productId,\n  headers: {\n    Accept: \"application/json\"\n  }\n}).then(response => {\n  expect(response.status).to.eq(200); // Vérifie le code de statut\n  expect(response.body).to.be.an(\"object\"); // Vérifie que la réponse est un objet\n  expect(response.body).to.include.keys(\"id\", \"name\", \"price\", \"description\");\n  expect(response.body.id).to.be.a(\"number\");\n  expect(response.body.name).to.be.a(\"string\");\n  expect(response.body.price).to.be.a(\"number\");\n  expect(response.body.description).to.be.a(\"string\");\n});",
              "err": {},
              "uuid": "2a8c8a1c-97c7-476d-a94d-76f7eecadb26",
              "parentUUID": "57f64bd5-43ba-4c51-ac75-1752fad55b40",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Devrait retourner 404 si le produit n'existe pas",
              "fullTitle": "GET / Récupere les détails d'un produit  Devrait retourner 404 si le produit n'existe pas",
              "timedOut": null,
              "duration": 262,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.request({\n  method: \"GET\",\n  url: apiUrl + \"/products/999999\",\n  failOnStatusCode: false // Permet de capturer la réponse même si le code est une erreur\n}).then(response => {\n  expect(response.status).to.eq(404); // Vérifie le code de statut\n});",
              "err": {},
              "uuid": "d4d1232b-c7ea-48d4-b37c-07e63c383aa4",
              "parentUUID": "57f64bd5-43ba-4c51-ac75-1752fad55b40",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "2a8c8a1c-97c7-476d-a94d-76f7eecadb26",
            "d4d1232b-c7ea-48d4-b37c-07e63c383aa4"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 550,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "7.2.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "reportDir": "cypress/reports/mochawesome",
        "overwrite": false,
        "html": true,
        "json": true
      },
      "version": "6.2.0"
    }
  }
}