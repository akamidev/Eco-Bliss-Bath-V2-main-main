{
  "stats": {
    "suites": 3,
    "tests": 3,
    "passes": 3,
    "pending": 0,
    "failures": 0,
    "start": "2025-07-22T19:39:34.179Z",
    "end": "2025-07-22T19:39:37.083Z",
    "duration": 2904,
    "testsRegistered": 3,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "b9876bf0-e6d8-40c1-9358-97100bd411c3",
      "title": "",
      "fullFile": "cypress\\e2e\\apiGetOrders.cy.js",
      "file": "cypress\\e2e\\apiGetOrders.cy.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "6d25deb7-ae6a-4cb6-b840-bacfed0af2d2",
          "title": "GET /orders sans authentification",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should return 401 KO",
              "fullTitle": "GET /orders sans authentification should return 401 KO",
              "timedOut": null,
              "duration": 144,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.request({\n  method: \"GET\",\n  url: apiUrl + \"/orders\",\n  failOnStatusCode: false // Permet de capturer la réponse même si le code est une erreur.\n}).then(response => {\n  expect(response.status).to.eq(401); // Vérifie le code de statut.\n  expect(response.body.message).to.include(\"JWT Token not found\"); // Vérifie le message d'erreur.\n  cy.log(\"Response body:\", response.body); // Affiche le corps de la réponse dans les logs.\n});",
              "err": {},
              "uuid": "5da00966-c6d7-452a-b714-319d7bb865ab",
              "parentUUID": "6d25deb7-ae6a-4cb6-b840-bacfed0af2d2",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "5da00966-c6d7-452a-b714-319d7bb865ab"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 144,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "c8f6ecd2-b013-4b0b-b1e5-57e6bba20b5d",
          "title": "GET /orders avec authentification",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Devrait retourner un 200 avec un property orderLines",
              "fullTitle": "GET /orders avec authentification Devrait retourner un 200 avec un property orderLines",
              "timedOut": null,
              "duration": 923,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.request({\n  method: \"GET\",\n  url: apiUrl + \"/orders\",\n  headers: {\n    Authorization: \"Bearer \" + token // Utilise le token d'authentification.\n  },\n  body: {\n    //s’il y a un body\n  }\n}).then(response => {\n  // Assertions pour le test\n  expect(response.status).to.eq(200); // Vérifie le code de statut.\n  expect(response.body).to.have.property(\"orderLines\"); // Vérifie la présence de la propriété orderLines.\n});",
              "err": {},
              "uuid": "e92b72d3-eb91-4f4d-b741-8ca7386b6da3",
              "parentUUID": "c8f6ecd2-b013-4b0b-b1e5-57e6bba20b5d",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "e92b72d3-eb91-4f4d-b741-8ca7386b6da3"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 923,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "5f48e049-7c20-4abc-bb1f-9935631dbac2",
          "title": "GET /orders sans commande",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Devrait retourner 404 et un message explicite s'il n'y a pas de commande en cours",
              "fullTitle": "GET /orders sans commande Devrait retourner 404 et un message explicite s'il n'y a pas de commande en cours",
              "timedOut": null,
              "duration": 1775,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Génère des données factices pour créer un nouvel utilisateur.\nconst fakeEmail = _faker.faker.internet.email();\nconst fakeFirstName = _faker.faker.person.firstName();\nconst fakeLastName = _faker.faker.person.lastName();\nconst fakePassword = _faker.faker.internet.password();\n// Étape 1 : création d'un utilisateur pour obtenir un token.\ncy.request({\n  method: \"POST\",\n  url: apiUrl + \"/register\",\n  body: {\n    email: fakeEmail,\n    firstname: fakeFirstName,\n    lastname: fakeLastName,\n    plainPassword: {\n      first: fakePassword,\n      second: fakePassword\n    }\n  }\n}).then(resRegister => {\n  expect(resRegister.status).to.eq(200); // Vérifie que l'inscription est réussie.\n  // Étape 2 : connexion avec le nouvel utilisateur pour obtenir un token.\n  cy.request(\"POST\", apiUrl + \"/login\", {\n    username: fakeEmail,\n    password: fakePassword\n  }).then(resLogin => {\n    expect(resLogin.status).to.eq(200); // Vérifie que la connexion est réussie.\n    const token = resLogin.body.token; // Récupère le token.\n    // Étape 3 : test de la route GET /orders avec le nouvel utilisateur.\n    cy.request({\n      method: \"GET\",\n      url: apiUrl + \"/orders\",\n      headers: {\n        Authorization: `Bearer ${token}`,\n        Accept: \"application/json\"\n      },\n      failOnStatusCode: false // Permet de capturer la réponse même si le code est une erreur.\n    }).then(response => {\n      expect(response.status).to.eq(404); // Vérifie que le code de statut est 404.\n      if (typeof response.body === \"string\") {\n        expect(response.body).to.include(\"Aucune commande en cours\"); // Vérifie le message d'erreur.\n      }\n    });\n  });\n});",
              "err": {},
              "uuid": "00cabf1b-a32a-46b6-aaf7-35c201080a6c",
              "parentUUID": "5f48e049-7c20-4abc-bb1f-9935631dbac2",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "00cabf1b-a32a-46b6-aaf7-35c201080a6c"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1775,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "7.2.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "reportDir": "cypress/reports/mochawesome",
        "overwrite": false,
        "html": true,
        "json": true
      },
      "version": "6.2.0"
    }
  }
}