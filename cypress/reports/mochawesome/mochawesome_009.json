{
  "stats": {
    "suites": 4,
    "tests": 5,
    "passes": 5,
    "pending": 0,
    "failures": 0,
    "start": "2025-07-22T19:26:34.343Z",
    "end": "2025-07-22T19:26:35.852Z",
    "duration": 1509,
    "testsRegistered": 5,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "993cf2fa-18e3-4cb2-8f49-6c71fdee4da5",
      "title": "",
      "fullFile": "cypress\\e2e\\apiGetProducts.cy.js",
      "file": "cypress\\e2e\\apiGetProducts.cy.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "e7acdcd1-50cc-4418-a1df-3f04954dba34",
          "title": "GET / Products",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Devrait retourner un 200 avec la liste des produits",
              "fullTitle": "GET / Products Devrait retourner un 200 avec la liste des produits",
              "timedOut": null,
              "duration": 246,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.request({\n  method: \"GET\",\n  url: apiUrl + \"/products\",\n  headers: {\n    Accept: \"application/json\"\n  }\n}).then(response => {\n  expect(response.status).to.eq(200); // Vérifie le code de statut\n  expect(response.body).to.be.an(\"array\"); // Vérifie que la réponse est un tableau\n  expect(response.body.length).to.be.greaterThan(0); // Vérifie qu'il y a au moins un produit\n  // Vérifie les propriétés de chaque produit\n  response.body.forEach(product => {\n    expect(product).to.include.keys(\"id\", \"name\", \"price\", \"description\");\n    expect(product.id).to.be.a(\"number\");\n    expect(product.name).to.be.a(\"string\");\n    expect(product.price).to.be.a(\"number\");\n    expect(product.description).to.be.a(\"string\");\n  });\n});",
              "err": {},
              "uuid": "dab9b4fe-f838-402e-992e-a8da4163c2ac",
              "parentUUID": "e7acdcd1-50cc-4418-a1df-3f04954dba34",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "dab9b4fe-f838-402e-992e-a8da4163c2ac"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 246,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "f1cddb62-fef2-4942-80b9-0e401534d353",
          "title": "GET / Products random",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Devrait retourner un 200 avec une liste de 3 produits aleatoires",
              "fullTitle": "GET / Products random Devrait retourner un 200 avec une liste de 3 produits aleatoires",
              "timedOut": null,
              "duration": 201,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.request({\n  method: \"GET\",\n  url: apiUrl + \"/products/random\",\n  headers: {\n    Accept: \"application/json\"\n  }\n}).then(response => {\n  expect(response.status).to.eq(200); // Vérifie le code de statut\n  expect(response.body).to.be.an(\"array\"); // Vérifie que la réponse est un tableau\n  expect(response.body.length).to.be.equal(3); // Vérifie qu'il y a exactement 3 produits\n  // Vérifie les propriétés de chaque produit\n  response.body.forEach(product => {\n    expect(product).to.include.keys(\"id\", \"name\", \"price\", \"description\");\n    expect(product.id).to.be.a(\"number\");\n    expect(product.name).to.be.a(\"string\");\n    expect(product.price).to.be.a(\"number\");\n    expect(product.description).to.be.a(\"string\");\n  });\n});",
              "err": {},
              "uuid": "6666c99e-69d6-4819-a7b5-52e4296c810c",
              "parentUUID": "f1cddb62-fef2-4942-80b9-0e401534d353",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "6666c99e-69d6-4819-a7b5-52e4296c810c"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 201,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "910ab7bc-5a8a-4dab-84f6-23731523e78c",
          "title": "GET / Products random qui ne sont pas les mêmes",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Devrait retourner des produits aléatoires à chaque appel",
              "fullTitle": "GET / Products random qui ne sont pas les mêmes Devrait retourner des produits aléatoires à chaque appel",
              "timedOut": null,
              "duration": 368,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.request(apiUrl + \"/products/random\").then(response => {\n  const secondCall = response.body; // Stocke le résultat du second appel\n  // Compare les deux résultats pour vérifier qu'ils sont différents\n  expect(JSON.stringify(firstCall)).to.not.equal(JSON.stringify(secondCall));\n});",
              "err": {},
              "uuid": "9406fee0-1130-4051-8705-aa30332e269d",
              "parentUUID": "910ab7bc-5a8a-4dab-84f6-23731523e78c",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "9406fee0-1130-4051-8705-aa30332e269d"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 368,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "8b52636c-4842-47e7-8cf9-120e82a6ec72",
          "title": "GET / Récupere les détails d'un produit ",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Devrait retourner un 200 avec un detail du produit",
              "fullTitle": "GET / Récupere les détails d'un produit  Devrait retourner un 200 avec un detail du produit",
              "timedOut": null,
              "duration": 334,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.request({\n  method: \"GET\",\n  url: apiUrl + \"/products/\" + productId,\n  headers: {\n    Accept: \"application/json\"\n  }\n}).then(response => {\n  expect(response.status).to.eq(200); // Vérifie le code de statut\n  expect(response.body).to.be.an(\"object\"); // Vérifie que la réponse est un objet\n  expect(response.body).to.include.keys(\"id\", \"name\", \"price\", \"description\");\n  expect(response.body.id).to.be.a(\"number\");\n  expect(response.body.name).to.be.a(\"string\");\n  expect(response.body.price).to.be.a(\"number\");\n  expect(response.body.description).to.be.a(\"string\");\n});",
              "err": {},
              "uuid": "c2e6c02c-fa4a-4329-8e5b-bde9f25c1edb",
              "parentUUID": "8b52636c-4842-47e7-8cf9-120e82a6ec72",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Devrait retourner 404 si le produit n'existe pas",
              "fullTitle": "GET / Récupere les détails d'un produit  Devrait retourner 404 si le produit n'existe pas",
              "timedOut": null,
              "duration": 228,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.request({\n  method: \"GET\",\n  url: apiUrl + \"/products/999999\",\n  failOnStatusCode: false // Permet de capturer la réponse même si le code est une erreur\n}).then(response => {\n  expect(response.status).to.eq(404); // Vérifie le code de statut\n});",
              "err": {},
              "uuid": "af75d365-f3bb-43d5-8492-d9a149ce22c6",
              "parentUUID": "8b52636c-4842-47e7-8cf9-120e82a6ec72",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "c2e6c02c-fa4a-4329-8e5b-bde9f25c1edb",
            "af75d365-f3bb-43d5-8492-d9a149ce22c6"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 562,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "7.2.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "reportDir": "cypress/reports/mochawesome",
        "overwrite": false,
        "html": true,
        "json": true
      },
      "version": "6.2.0"
    }
  }
}